Object subclass: #TweetsParsor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TweetsParser'!!TweetsParsor methodsFor: 'as yet unclassified' stamp: 'KedarPitke 10/30/2015 21:54'!parseToJSON|arrAgileTweet|arrAgileTweet := 'tweets_iphone.json' asFileReference readStreamDo: [ :in | (NeoJSONReader on: in readStream)  mapInstVarsFor: Tweet;  for: #ArrayOfAgileTweets customDo: [ :mapping | mapping   listOfElementSchema: Tweet ];   nextAs: #ArrayOfAgileTweets.].arrAgileTweet:= arrAgileTweet select: [ :tweet |  tweet user ~= nil ].arrAgileTweet do: [ :currTweet |		currTweet user: (self addUserDetail: currTweet).		currTweet entity: (self addEntityDetail: currTweet).		].	^arrAgileTweet 	! !!TweetsParsor methodsFor: 'as yet unclassified' stamp: 'KedarPitke 10/30/2015 02:17'!addEntityDetail:tweet 	"parse tweet dicitonary, get hashtag list, get media data, consruct Entity object"	"returns an entity object associated with a tweet"	| entityDict currEntity hashtagList  currHashtag tagList mediaList currMedia |		tagList := OrderedCollection new.	entityDict := tweet entity.	currEntity := Entity new.	hashtagList := entityDict at: 'hashtags'.	hashtagList do: [:tagDict | 		 currHashtag := Hashtag new.		currHashtag text: (tagDict at:'text').		tagList add: currHashtag.		].	currEntity hashtags:tagList.		(entityDict includesKey: #media) ifTrue:[	mediaList := entityDict at: 'media'.	mediaList do: [:mediaDict | 		 currMedia := Media new.		currMedia url: (mediaDict at:'url').		currMedia type: (mediaDict at:'type').		currEntity media: currMedia		].	].	^currEntity	 	! !!TweetsParsor methodsFor: 'as yet unclassified' stamp: 'KedarPitke 10/29/2015 21:52'!addUserDetail:tweet	"parse tweet dictionary, create user object, add user object to tweet object"	| userDict currUser |	userDict := tweet user.	currUser := User new.	currUser name:(userDict at: 'name').	currUser time_zone:(userDict at:'time_zone').	currUser location:(userDict at:'location').	currUser lang:(userDict at:'lang').	currUser created_at:(userDict at:'created_at').	currUser followers_count:(userDict at:'followers_count').	currUser favourites_count:(userDict at:'favourites_count').	currUser statuses_count:(userDict at:'statuses_count').	currUser friends_count:(userDict at:'friends_count').	^currUser ! !