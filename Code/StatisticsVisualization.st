Object subclass: #TotalTweets	instanceVariableNames: 'Viz'	classVariableNames: ''	poolDictionaries: ''	category: 'StatisticsVisualization'!!TotalTweets methodsFor: 'as yet unclassified' stamp: 'TanmayPatil 10/15/2015 02:55'!allTweets	^ allTweets! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'TanmayPatil 10/18/2015 14:29'!initDayOfWeekData	| dataSet d1 d2 d3 d4 d5 d6 d7 |	dataSet := OrderedCollection new.	d1 := OrderedCollection new.	d1 add: 'Mon'.	d1 add: 0.	dataSet add: d1.	d2 := OrderedCollection new.	d2 add: 'Tue'.	d2 add: 0.	dataSet add: d2.	d3 := OrderedCollection new.	d3 add: 'Wed'.	d3 add: 0.	dataSet add: d3.	d4 := OrderedCollection new.	d4 add: 'Thu'.	d4 add: 0.	dataSet add: d4.	d5 := OrderedCollection new.	d5 add: 'Fri'.	d5 add: 0.	dataSet add: d5.	d6 := OrderedCollection new.	d6 add: 'Sat'.	d6 add: 0.	dataSet add: d6.	d7 := OrderedCollection new.	d7 add: 'Sun'.	d7 add: 0.	dataSet add: d7.	^ dataSet	! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'MeenalKulkarni 10/18/2015 13:15'!showBySensitivity|tweets possibly_true_count tp trueCnt falseCnt b ds  n|tweets := OrderedCollection new.possibly_true_count := OrderedCollection new.tp := TweetsParsor new.tweets := tp parseToJSON. possibly_true_count := tweets collect: [:each | each possibly_sensitive].possibly_true_count at: 1.trueCnt:= 0.falseCnt:= 0.n:= possibly_true_count size.1 to: n do:[:index|(possibly_true_count at: index) ifTrue:[trueCnt:=trueCnt + 1] ifFalse:[falseCnt := falseCnt + 1]].b := RTGrapher new.ds := RTStackedDataSet new.	ds points: { { 'True'. trueCnt} . 		{'False' . falseCnt} }.ds y: #second.ds barShape width: 40.ds histogramWithBarTitle: #first rotation: -45.b add: ds.b axisX noLabel; noTick.b build.^ b view.! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'TanmayPatil 10/22/2015 20:29'!showByDayOfWeek| b ds tweets tp   dataSet  row count  day |	tweets := OrderedCollection new.	tp := TweetsParsor new.	tweets := tp parseToJSON.	dataSet := self initDayOfWeekData.		tweets do: [ :tweet |		tweet created_at = -1 ifFalse: [ 			day := (tweet created_at substrings: ' ') at: 1.			row := (dataSet select: [ :i |				(i at: 1) = day			]) at: 1.			count := row at: 2.			row removeAt: 2.			row add: (count + 1).		 ].	].		b := RTGrapher new.	ds := RTStackedDataSet new.	ds points: dataSet.	ds y: #second.	ds barShape width: 40.	ds histogramWithBarTitle: #first rotation: -45.	b add: ds.	b axisX noLabel; noTick.	b build.	^ b view! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'KedarPitke 10/16/2015 20:25'!initialize	super initialize.	"TODO - Write CSV / JSON parser here."	Viz = true	! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'KedarPitke 10/30/2015 02:40'!showByUserPopularity| tweets followers_count_list v es tp|tweets := OrderedCollection new.followers_count_list := OrderedCollection new.tp := TweetsParsor new.tweets := tp parseToJSON. followers_count_list := tweets collect: [:each | each user followers_count ].v := RTView new.	es := (RTBox new size: 15; color: Color blue) elementsOn: followers_count_list.	v addAll: es.	es @ RTPopup.	RTMetricNormalizer new		elements: es;		alphaColor: 0.8;		normalizeHeight: #yourself min: 0 max: 80.	RTHorizontalLineLayout new alignBottom; on: es.	es @ RTLabelled.	^v view! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'TanmayPatil 10/22/2015 20:30'!showByMonth| b ds tweets tp  month dataSet  row count  |	tweets := OrderedCollection new.	tp := TweetsParsor new.	tweets := tp parseToJSON.	dataSet := self initMonthlyData.		tweets do: [ :tweet |		tweet created_at = -1 ifFalse: [ 			month := (tweet created_at substrings: ' ') at: 2.			row := (dataSet select: [ :i |				(i at: 1) = month			]) at: 1.			count := row at: 2.			row removeAt: 2.			row add: (count + 1). 		].	].		b := RTGrapher new.	ds := RTStackedDataSet new.	ds points: dataSet.	ds y: #second.	ds barShape width: 40.	ds histogramWithBarTitle: #first rotation: -45.	b add: ds.	b axisX noLabel; noTick.	b build.	^ b view! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'snehalshendware 10/16/2015 21:21'!showByRetweetCount| tweets retweet_count_list v es tp|tweets := OrderedCollection new.retweet_count_list := OrderedCollection new.tp := TweetsParsor new.tweets := tp parseToJSON. retweet_count_list := tweets collect: [:each | each retweet_count].v := RTView new.	es := (RTBox new size: 15; color: Color blue) elementsOn: retweet_count_list.	v addAll: es.	es @ RTPopup.	RTMetricNormalizer new		elements: es;		alphaColor: 0.8;		normalizeHeight: #yourself min: 0 max: 80.	RTHorizontalLineLayout new alignBottom; on: es.	es @ RTLabelled.	^v view! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'TanmayPatil 10/18/2015 13:56'!initMonthlyData	| dataSet d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 |	dataSet := OrderedCollection new.	d1 := OrderedCollection new.	d1 add: 'Jan'.	d1 add: 0.	dataSet add: d1.	d2 := OrderedCollection new.	d2 add: 'Feb'.	d2 add: 0.	dataSet add: d2.	d3 := OrderedCollection new.	d3 add: 'Mar'.	d3 add: 0.	dataSet add: d3.	d4 := OrderedCollection new.	d4 add: 'Apr'.	d4 add: 0.	dataSet add: d4.	d5 := OrderedCollection new.	d5 add: 'May'.	d5 add: 0.	dataSet add: d5.	d6 := OrderedCollection new.	d6 add: 'Jun'.	d6 add: 0.	dataSet add: d6.	d7 := OrderedCollection new.	d7 add: 'Jul'.	d7 add: 0.	dataSet add: d7.	d8 := OrderedCollection new.	d8 add: 'Aug'.	d8 add: 0.	dataSet add: d8.	d9 := OrderedCollection new.	d9 add: 'Sep'.	d9 add: 0.	dataSet add: d9.	d10 := OrderedCollection new.	d10 add: 'Oct'.	d10 add: 0.	dataSet add: d10.	d11 := OrderedCollection new.	d11 add: 'Nov'.	d11 add: 0.	dataSet add: d11.	d12 := OrderedCollection new.	d12 add: 'Dec'.	d12 add: 0.	dataSet add: d12.	^ dataSet! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'MeenalKulkarni 11/1/2015 22:54'!displayTweets	|tp tweets retweet_count_list text_list size_list v es |tp := TweetsParsor new.tweets := tp parseToJSON. retweet_count_list := tweets collect: [:each | each retweet_count].text_list := tweets collect: [:each | each text].size_list := text_list size.v := RTView new.	es := (RTBox new size: 15; color: Color blue) elementsOn: retweet_count_list.	v addAll: es.	RTNest new	for: es add:[:group :model| group addAll:((RTBox new color:Color red)elementsOn: text_list).].			es @ RTPopup .		RTMetricNormalizer new		elements: es;		alphaColor: 0.8;		normalizeHeight: #yourself min: 0 max: 80.	RTHorizontalLineLayout new alignBottom; on: es.	es @ RTLabelled.	^v view.! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'snehalshendware 11/1/2015 20:52'!showByHashTag| tp tweets entities htArrays htTextArrays AllHashtag AllHashtagUC htDict connected_hashtag edges  count View view y|	tweets := OrderedCollection new.	entities := OrderedCollection new.	htArrays := OrderedCollection new.	htTextArrays := OrderedCollection new.	AllHashtag := OrderedCollection new.	AllHashtagUC := OrderedCollection new.	AllHashtag := OrderedCollection new.	connected_hashtag := OrderedCollection new.	htDict := Dictionary new.	tp := TweetsParsor new.	tweets := tp parseToJSON.	entities := tweets collect: [:tweet | tweet entities ].	htArrays := entities collect: [:entity | entity hashtags]. 	htTextArrays := htArrays collect: [:htag | htag  collect: [:x | x text]].	htTextArrays do: [ :htag |		htag = -1 ifFalse: [			htag do: [:a |  AllHashtag add: a			].			].	].	AllHashtagUC := AllHashtag collect: [:x | y := (x asUppercase)].	AllHashtagUC do: [ :x |  (htDict includesKey: x asUppercase) 		ifFalse: [ htDict add: x asUppercase -> 1; yourself]		ifTrue: [ count := htDict at: x. 		       htDict add: x asUppercase -> (count + 1); yourself]	].   AllHashtag := htDict keys asSortedCollection. 		htTextArrays do: [ :hTagList |		(hTagList isEmpty) ifFalse: 			[ hTagList do: [:parentTag | hTagList do: [:childTag |					connected_hashtag add: (parentTag) asUppercase -> (childTag) asUppercase; 	yourself.].].].].		View := ROView new.	view := ROMondrianViewBuilder view: View.	view shape label 		size: 10;		color: Color red.	 	view nodes: (AllHashtag).	view shape line.	view 		edges: (connected_hashtag)		from: #key		to: #value.	view circleLayout.	ROEaselMorphic new populateMenuOn: view.	view open.	! !Object subclass: #RTOSMTweet	instanceVariableNames: 'locationCountMapping'	classVariableNames: ''	poolDictionaries: ''	category: 'StatisticsVisualization'!!RTOSMTweet methodsFor: 'as yet unclassified' stamp: 'AdityaBivalkar 11/1/2015 16:54'!plotOnOpenStreetMap:locationDict| v map e   timezones i size timezone location   count lat  lon place|	v := RTView new.	map := RTOSM new.	e := map element.	v add: e.	timezones:=locationCountMapping keys.	i:=1.	size:=locationCountMapping size. 	[ i<=size ]whileTrue:[	timezone:=timezones at: i.	count:=locationCountMapping at: timezone.	location:=locationDict at: timezone.	lat:= location latitude asNumber.	lon:=location longitude asNumber.	 e:=(RTEllipse new		 size: (count*100);		 color: (Color blue alpha: 0.3)) 		elementOn:{(timezone).			  (count)}.		e @ RTPopup @ RTHighlightable.	   place:=lat @ lon.	   e translateTo: (map latLonToRoassal: place).	   v add: e.	i:=i+1.].   v canvas camera scale: 0.02; noInitializationWhenOpen.    v @ RTDraggableView.    v @ RTZoomableView.	^v.    	! !!RTOSMTweet methodsFor: 'as yet unclassified' stamp: 'AdityaBivalkar 10/31/2015 15:31'!locationCountMapping:mappinglocationCountMapping:=mapping.! !!RTOSMTweet methodsFor: 'as yet unclassified' stamp: 'AdityaBivalkar 10/31/2015 15:31'!locationCountMapping^ locationCountMapping.! !!RTOSMTweet methodsFor: 'as yet unclassified' stamp: 'AdityaBivalkar 11/1/2015 15:44'!showTweetDistribution|reader locationDict locationToCountMapping keys size i locString tweetParser tweetArray user timezone count  tweet|reader:=CSVReader new.locationDict:=reader parseCSV.locationToCountMapping:=Dictionary new.keys:= locationDict keys.size:=keys size.i:=1.[ i<=size ]whileTrue:[locString:=keys at: i.locationToCountMapping at: locString put: 0.i:=i+1.	].locationToCountMapping.tweetParser:=TweetsParsor new.tweetArray:=tweetParser parseToJSON.size:= tweetArray size.i:=1.[ i<=size ]whileTrue:[tweet:=tweetArray at: i.user:= tweet user.timezone:=nil.timezone:=user time_zone.(timezone=nil)ifFalse:[count:=nil.count:=locationToCountMapping at: timezone ifPresent:[locationToCountMapping at: timezone.].(count= nil)ifFalse:[count:=count+1.locationToCountMapping at: timezone put:count.].	].i:=i+1.]. locationToCountMapping.locationCountMapping:=locationToCountMapping.^ self plotOnOpenStreetMap:locationDict.! !