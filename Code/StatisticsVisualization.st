Object subclass: #RTOSMTweet	instanceVariableNames: 'locationCountMapping'	classVariableNames: ''	poolDictionaries: ''	category: 'StatisticsVisualization'!!RTOSMTweet methodsFor: 'as yet unclassified' stamp: 'AdityaBivalkar 10/31/2015 15:31'!locationCountMapping^ locationCountMapping.! !!RTOSMTweet methodsFor: 'as yet unclassified' stamp: 'AdityaBivalkar 11/21/2015 13:05'!plotOnOpenStreetMap:locationDict| v map e   timezones i size timezone location   count lat  lon place|	v := RTView new.	map := RTOSM new.	e := map element.	v add: e.	timezones:=locationCountMapping keys.	i:=1.	size:=locationCountMapping size. 	[ i<=size ]whileTrue:[	timezone:=timezones at: i.	count:=locationCountMapping at: timezone.	location:=locationDict at: timezone.	lat:= location latitude asNumber.	lon:=location longitude asNumber.	 e:=(RTEllipse new		 size: (count*200)%100000;		 color: (Color blue alpha: 0.3)) 		elementOn:{(timezone).			  (count)}.		e @ RTPopup @ RTHighlightable.	   place:=lat @ lon.	   e translateTo: (map latLonToRoassal: place).	   v add: e.	i:=i+1.].   v canvas camera scale: 0.02; noInitializationWhenOpen.    v @ RTDraggableView.    v @ RTZoomableView.	^v.    	! !!RTOSMTweet methodsFor: 'as yet unclassified' stamp: 'AdityaBivalkar 11/21/2015 12:20'!showTweetDistribution|reader locationDict locationToCountMapping keys size i locString tweetParser tweetArray user timezone count  tweet|reader:=CSVReader new.locationDict:=reader parseCSV.locationToCountMapping:=Dictionary new.keys:= locationDict keys.size:=keys size.i:=1.[ i<=size ]whileTrue:[locString:=keys at: i.locationToCountMapping at: locString put: 0.i:=i+1.	].locationToCountMapping.tweetParser:=TweetsParsor new.tweetArray:=tweetParser parseToJSON.size:= tweetArray size.i:=1.[ i<=size ]whileTrue:[tweet:=tweetArray at: i.user:= tweet user.timezone:=nil.timezone:=user time_zone.(timezone=nil)ifFalse:[count:=nil.count:=locationToCountMapping at: timezone ifPresent:[locationToCountMapping at: timezone.].(count= nil)ifFalse:[count:=count+1.locationToCountMapping at: timezone put:count.].	].i:=i+1.]. locationToCountMapping.locationCountMapping:=locationToCountMapping.^ (self plotOnOpenStreetMap:locationDict).! !!RTOSMTweet methodsFor: 'as yet unclassified' stamp: 'AdityaBivalkar 10/31/2015 15:31'!locationCountMapping:mappinglocationCountMapping:=mapping.! !!RTOSMTweet methodsFor: 'as yet unclassified' stamp: 'AdityaBivalkar 11/15/2015 19:54'!plotSentimentOnOSM:sentimentsDict| v map e   timezones i size timezone  lat  lon place sentiment netSentiment colorVal|	v := RTView new.	map := RTOSM new.	e := map element.	v add: e.	timezones:=sentimentsDict keys.	i:=1.	size:=sentimentsDict size. 	[ i<=size ]whileTrue:[	timezone:=timezones at: i.	sentiment:=sentimentsDict at: timezone.	lat:= sentiment latitude asNumber.	lon:=sentiment longitude asNumber.	netSentiment:=sentiment netSentiment.	colorVal:=(Color green alpha: 0.9).     ( netSentiment < 0 )ifTrue:[colorVal:=(Color red alpha: 0.3). 	netSentiment:=(netSentiment*(-1))].	e:=(RTEllipse new		 size: (netSentiment*50);		 color: colorVal) 		elementOn:{(timezone).			  (netSentiment)}.		e @ RTPopup @ RTHighlightable.	   place:=lat @ lon.	   e translateTo: (map latLonToRoassal: place).	   v add: e.	i:=i+1.].   v canvas camera scale: 0.02; noInitializationWhenOpen.    v @ RTDraggableView.    v @ RTZoomableView.	^v.    	! !Object subclass: #TotalTweets	instanceVariableNames: 'Viz'	classVariableNames: ''	poolDictionaries: ''	category: 'StatisticsVisualization'!!TotalTweets methodsFor: 'as yet unclassified' stamp: 'MeenalKulkarni 11/15/2015 20:19'!initMonthlyData	| dataSet d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d1t d2t d3t d4t d5t d6t  d7t d8t d9t d10t d11t d12t |	dataSet := OrderedCollection new.	d1 := OrderedCollection new.	d1t := OrderedCollection new.	d1 add: 'Jan'.	d1 add: 0.	d1 add: d1t .	dataSet add: d1.	d2 := OrderedCollection new.	d2t := OrderedCollection new.	d2 add: 'Feb'.	d2 add: 0.	d2 add: d2t.	dataSet add: d2.	d3 := OrderedCollection new.	d3t := OrderedCollection new.	d3 add: 'Mar'.	d3 add: 0.	d3 add: d3t.	dataSet add: d3.	d4 := OrderedCollection new.	d4t := OrderedCollection new.	d4 add: 'Apr'.	d4 add: 0.	d4 add: d4t.	dataSet add: d4.	d5 := OrderedCollection new.	d5t := OrderedCollection new.	d5 add: 'May'.	d5 add: 0.	d5 add: d5t.	dataSet add: d5.	d6 := OrderedCollection new.	d6t := OrderedCollection new.	d6 add: 'Jun'.	d6 add: 0.	d6 add: d6t.	dataSet add: d6.	d7 := OrderedCollection new.	d7t := OrderedCollection new.	d7 add: 'Jul'.	d7 add: 0.	d7 add: d7t.	dataSet add: d7.	d8 := OrderedCollection new.	d8t := OrderedCollection new.	d8 add: 'Aug'.	d8 add: 0.	d8 add: d8t.	dataSet add: d8.	d9 := OrderedCollection new.	d9t := OrderedCollection new.	d9 add: 'Sep'.	d9 add: 0.	d9 add: d9t.	dataSet add: d9.	d10 := OrderedCollection new.	d10t := OrderedCollection new.	d10 add: 'Oct'.	d10 add: 0.	d10 add: d10t.	dataSet add: d10.	d11 := OrderedCollection new.	d11t := OrderedCollection new.	d11 add: 'Nov'.	d11 add: 0.	d11 add: d11t.	dataSet add: d11.	d12 := OrderedCollection new.	d12t := OrderedCollection new.	d12 add: 'Dec'.	d12 add: 0.	d12 add: d12t.	dataSet add: d12.	^ dataSet! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'KedarPitke 11/15/2015 17:59'!showByHashTag| tp tweets entities htArrays htTextArrays AllHashtag AllHashtagUC htDict connected_hashtag count View view y|	tweets := OrderedCollection new.	entities := OrderedCollection new.	htArrays := OrderedCollection new.	htTextArrays := OrderedCollection new.	AllHashtag := OrderedCollection new.	AllHashtagUC := OrderedCollection new.	AllHashtag := OrderedCollection new.	connected_hashtag := OrderedCollection new.	htDict := Dictionary new.	tp := TweetsParsor new.	tweets := tp parseToJSON: 'tweets_iphone.json'.	entities := tweets collect: [:tweet | tweet entities ].	htArrays := entities collect: [:entity | entity hashtags]. 	htTextArrays := htArrays collect: [:htag | htag  collect: [:x | x text]].	htTextArrays do: [ :htag |		htag = -1 ifFalse: [			htag do: [:a |  AllHashtag add: a			].			].	].	AllHashtagUC := AllHashtag collect: [:x | y := (x asUppercase)].	AllHashtagUC do: [ :x |  (htDict includesKey: x asUppercase) 		ifFalse: [ htDict add: x asUppercase -> 1; yourself]		ifTrue: [ count := htDict at: x. 		       htDict add: x asUppercase -> (count + 1); yourself]	].	AllHashtag := (( htDict associations sort: [ :assoc1 :assoc2 | assoc1 value > assoc2 value ]) 	collect: [ :assoc | assoc key ]).		htTextArrays do: [ :hTagList |		(hTagList isEmpty) ifFalse: 			[ hTagList do: [:parentTag | hTagList do: [:childTag |					connected_hashtag add: (parentTag) asUppercase -> (childTag) asUppercase; yourself.].].].].			View := ROView new.	view := ROMondrianViewBuilder view: View.		view shape circle  		size: 30;		color: (Color blue alpha: 0.5).	view interaction on: ROMouseEnter do: [ :evt | 	view raw elementsAsEdge do: [ :edg | (edg from == evt element) ifTrue: [ ROBlink on: edg ] ].].		 	view nodes: (AllHashtag).	view shape line.	view 		edges: (connected_hashtag)		from: #key		to: #value.	view circleLayout.	ROEaselMorphic new populateMenuOn: view.	view open.	! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'MeenalKulkarni 11/15/2015 20:23'!showTemporalDivisonComposed| composer v b tweets tp dataSet day row count ds k month  textCollection textCollection1 |composer := RTComposer new.	v := composer view.		"========"	b := RTGrapher new. 		b view: v.	tweets := OrderedCollection new.	tp := TweetsParsor new.	tweets := tp parseToJSON.	dataSet := self initDayOfWeekData.		textCollection := OrderedCollection new.		tweets do: [ :tweet |		tweet created_at = -1 ifFalse: [ 			day := (tweet created_at substrings: ' ') at: 1.			row := (dataSet select: [ :i |				(i at: 1) = day			]) at: 1.			count := row at: 2.			row at: 2 put: (count + 1).						textCollection:= row at: 3.			textCollection add: tweet text.			row at: 3 put: textCollection. 			 			].		 	].			ds := RTStackedDataSet new.	ds points: dataSet.	ds y: #second.	ds barShape width: 15.	ds histogramWithBarTitle: #first rotation: -45.	b add: ds.	b axisX noLabel; noTick.	b build.	composer group: #daywise.			"========"	k := RTGrapher new..		k view: v.	tweets := OrderedCollection new.	tp := TweetsParsor new.	tweets := tp parseToJSON.	dataSet := self initMonthlyData.		textCollection1 := OrderedCollection new.	tweets do: [ :tweet |		tweet created_at = -1 ifFalse: [ 			month := (tweet created_at substrings: ' ') at: 2.			row := (dataSet select: [ :i |				(i at: 1) = month			]) at: 1.			count := row at: 2.			row at: 2 put: (count + 1).			textCollection1:= row at: 3.			textCollection1 add: tweet text.			row at: 3 put: textCollection1. 		].	].			ds := RTStackedDataSet new.	ds points: dataSet.	ds y: #second.	ds barShape width: 15.	ds histogramWithBarTitle: #first rotation: -45.	k add: ds.	k axisX noLabel; noTick.	k build.	composer group: #monthwise.	composer move: #monthwise above: #daywise.		composer nameGroup: #monthwise as: 'Month-wise distribution of tweets'.	composer nameGroup: #daywise as: 'Day-wise distribution of tweets'. ^v! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'MeenalKulkarni 11/15/2015 20:20'!showBySensitivity|tweets possibly_true_count falseSensitiveTweets trueSensitiveTweets tp trueCnt falseCnt b ds  n|tweets := OrderedCollection new.possibly_true_count := OrderedCollection new.tp := TweetsParsor new.tweets := tp parseToJSON. possibly_true_count := tweets collect: [:each | each possibly_sensitive].possibly_true_count at: 1.trueCnt:= 0.falseCnt:= 0.n:= possibly_true_count size.1 to: n do:[:index|(possibly_true_count at: index) ifTrue:[trueCnt:=trueCnt + 1] ifFalse:[falseCnt := falseCnt + 1]].b := RTGrapher new.ds := RTStackedDataSet new.falseSensitiveTweets := OrderedCollection new.trueSensitiveTweets := OrderedCollection new.tweets do: [ :tweet |tweet possibly_sensitive = false ifTrue:[falseSensitiveTweets add: tweet text]	ifFalse:[trueSensitiveTweets add: tweet text]	].	ds points: { { 'True'. trueCnt . trueSensitiveTweets} . 		{'False' . falseCnt . falseSensitiveTweets} }.ds y: #second.ds barShape width: 40.ds histogramWithBarTitle: #first rotation: -45.b add: ds.b axisX noLabel; noTick.b build.^ b view.! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'KedarPitke 10/16/2015 20:25'!initialize	super initialize.	"TODO - Write CSV / JSON parser here."	Viz = true	! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'TanmayPatil 10/15/2015 02:55'!allTweets	^ allTweets! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'MeenalKulkarni 11/15/2015 20:20'!showByMonth| b ds tweets tp  month dataSet  row count  textCollection |	tweets := OrderedCollection new.	tp := TweetsParsor new.	tweets := tp parseToJSON.	dataSet := self initMonthlyData.		tweets do: [ :tweet |		tweet created_at = -1 ifFalse: [ 			month := (tweet created_at substrings: ' ') at: 2.			row := (dataSet select: [ :i |				(i at: 1) = month			]) at: 1.			count := row at: 2.			row at: 2 put: (count + 1).			textCollection:= row at: 3.			textCollection add: tweet text.			row at: 3 put: textCollection. 		].	].		b := RTGrapher new.	ds := RTStackedDataSet new.	ds points: dataSet.	ds y: #second.	ds barShape width: 40.	ds histogramWithBarTitle: #first rotation: -45.	b add: ds.	b axisX noLabel; noTick.	b build.	^ b view! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'MeenalKulkarni 11/15/2015 20:19'!showByDayOfWeek| b ds tweets tp   dataSet   row count  day textCollection |	tweets := OrderedCollection new.	tp := TweetsParsor new.	tweets := tp parseToJSON.	dataSet := self initDayOfWeekData.		textCollection := OrderedCollection new.		tweets do: [ :tweet |		tweet created_at = -1 ifFalse: [ 			day := (tweet created_at substrings: ' ') at: 1.			row := (dataSet select: [ :i |				(i at: 1) = day			]) at: 1.			count := row at: 2.			row at: 2 put: (count + 1).						textCollection:= row at: 3.			textCollection add: tweet text.			row at: 3 put: textCollection. 			 			].		 	].		b := RTGrapher new.	ds := RTStackedDataSet new.	ds points: dataSet.	ds y: #second.	ds barShape width: 40.	ds histogramWithBarTitle: #first rotation: -45.	b add: ds.	b axisX noLabel; noTick.	b build.	^ b view! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'KedarPitke 11/14/2015 18:30'!showByRetweetCount| tweets retweet_count_list v es tp|tweets := OrderedCollection new.retweet_count_list := OrderedCollection new.tp := TweetsParsor new.tweets := tp parseToJSON. retweet_count_list := tweets collect: [:each | each retweet_count].retweet_count_list  := retweet_count_list asSortedCollection: [:f1 :f2 | f1 > f2].retweet_count_list  :=retweet_count_list first: 10.v := RTView new.	es := (RTBox new size: 15; color: Color blue) elementsOn: retweet_count_list.	v addAll: es.	es @ RTPopup.	RTMetricNormalizer new		elements: es;		alphaColor: 0.8;		normalizeHeight: #yourself min: 0 max: 80.	RTHorizontalLineLayout new alignBottom; on: es.	es @ RTLabelled.	^v view! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'MeenalKulkarni 11/1/2015 22:54'!displayTweets	|tp tweets retweet_count_list text_list size_list v es |tp := TweetsParsor new.tweets := tp parseToJSON. retweet_count_list := tweets collect: [:each | each retweet_count].text_list := tweets collect: [:each | each text].size_list := text_list size.v := RTView new.	es := (RTBox new size: 15; color: Color blue) elementsOn: retweet_count_list.	v addAll: es.	RTNest new	for: es add:[:group :model| group addAll:((RTBox new color:Color red)elementsOn: text_list).].			es @ RTPopup .		RTMetricNormalizer new		elements: es;		alphaColor: 0.8;		normalizeHeight: #yourself min: 0 max: 80.	RTHorizontalLineLayout new alignBottom; on: es.	es @ RTLabelled.	^v view.! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'KedarPitke 11/14/2015 18:29'!showByUserPopularity| tweets followers_count_list v es tp  |tweets := OrderedCollection new.followers_count_list := OrderedCollection new.tp := TweetsParsor new.tweets := tp parseToJSON. followers_count_list := tweets collect: [:each | each user followers_count ].followers_count_list  := followers_count_list asSortedCollection: [:f1 :f2 | f1 > f2].followers_count_list  :=followers_count_list first: 10.v := RTView new.	es := (RTBox new size: 15; color: Color blue) elementsOn: followers_count_list.	v addAll: es.	es @ RTPopup.	RTMetricNormalizer new		elements: es;		alphaColor: 0.8;		normalizeHeight: #yourself min: 50 max: 200.	RTHorizontalLineLayout new alignBottom; on: es.	es @ RTLabelled.	^v view! !!TotalTweets methodsFor: 'as yet unclassified' stamp: 'MeenalKulkarni 11/15/2015 20:18'!initDayOfWeekData	| dataSet d1 d2 d3 d4 d5 d6 d7 d11 d22 d33 d44 d55 d66 d77|	dataSet := OrderedCollection new.	d1 := OrderedCollection new.	d11 := OrderedCollection new.	d1 add: 'Mon'.	d1 add: 0.	d1 add: d11.	dataSet add: d1.	d2 := OrderedCollection new.	d22 := OrderedCollection new.	d2 add: 'Tue'.	d2 add: 0.	d2 add: d22.	dataSet add: d2.	d3 := OrderedCollection new.	d33 := OrderedCollection new.	d3 add: 'Wed'.	d3 add: 0.	d3 add: d33.	dataSet add: d3.	d4 := OrderedCollection new.	d44 := OrderedCollection new.	d4 add: 'Thu'.	d4 add: 0.	d4 add: d44.	dataSet add: d4.	d5 := OrderedCollection new.	d55 := OrderedCollection new.	d5 add: 'Fri'.	d5 add: 0.	d5 add: d55.	dataSet add: d5.	d6 := OrderedCollection new.	d66 := OrderedCollection new.	d6 add: 'Sat'.	d6 add: 0.	d6 add: d66.	dataSet add: d6.	d7 := OrderedCollection new.	d77 := OrderedCollection new.	d7 add: 'Sun'.	d7 add: 0.	d7 add: d77.	dataSet add: d7.	^ dataSet! !